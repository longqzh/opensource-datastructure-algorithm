10
0 50 0
1 2 5436 7
1 0 4464 1
1 1 6500 5
1 2 1942 6
1 1 1942 8
1 2 5724 9
1 1 41 1
1 0 153 3
1 0 9169 0
1 1 8467 8
1 0 9961 3
1 2 6827 2
1 0 2995 5
1 1 6962 0
1 0 1478 6
1 2 292 0
1 2 153 2
3 0 1478 2382 1
1 2 491 4
1 1 292 1
1 1 8145 7
1 1 491 3
1 2 4604 1
3 2 5724 7421 1
1 1 4464 2
1 1 9961 7
1 0 8467 2
1 1 6334 0
4 0 7
1 0 3281 1
1 2 8467 8
1 2 5705 8
4 0 8
3 2 1942 8716 1
1 2 3902 6
1 0 2391 9
1 1 9358 8
1 2 4464 5
3 0 9961 9718 1
1 0 292 8
1 0 5436 8
3 2 7421 9895 1
1 1 3281 8
4 2 12
2 1 6962 1
1 2 9718 1
1 0 6334 8
1 1 7421 3
1 0 8145 2
0 50 0
1 1 6869 9
1 1 9789 3
1 2 285 6
1 1 7861 5
1 0 4688 6
1 1 1003 3
1 1 2510 2
1 2 5075 3
1 0 4182 6
1 1 4389 6
1 2 8476 5
1 2 7088 4
1 2 5255 3
1 2 2510 9
1 1 1426 8
1 1 7892 1
1 1 5699 4
1 0 1426 9
1 2 6869 8
2 1 4389 1
1 1 5255 2
3 2 5255 8617 1
1 1 3557 3
1 1 585 1
1 0 5075 5
1 2 712 0
3 2 7088 3757 1
2 2 285 1
1 2 21 6
1 1 285 4
4 0 4
1 1 712 8
1 1 5075 1
3 1 5255 9832 1
1 1 8651 0
1 1 8617 5
2 2 3757 1
1 0 7861 6
1 1 2600 5
1 1 4688 3
4 2 7
1 1 8476 2
1 2 3557 1
1 0 9789 4
3 1 5075 932 1
1 0 7088 8
1 2 1003 9
1 1 21 1
1 0 1003 4
0 50 0
1 2 112 8
1 0 3271 1
1 1 9405 5
1 2 2896 4
1 1 8823 8
1 1 6540 4
1 2 4485 3
1 0 2356 8
1 2 9405 1
1 1 2356 2
1 2 1111 8
1 0 3869 3
1 2 9357 2
1 2 556 2
1 2 9361 0
3 2 4485 8696 1
4 0 3
4 1 4
1 0 4485 4
1 2 1626 4
3 0 2356 1585 1
2 1 9405 1
4 2 9
1 1 556 1
1 1 8704 1
2 1 8823 1
1 1 1626 2
1 0 9617 4
2 0 3271 1
2 2 9361 1
1 2 1585 6
1 1 2835 0
1 0 3357 4
1 1 3022 5
1 0 6540 7
3 2 112 4041 1
2 2 8696 1
1 0 1111 5
3 2 1626 4423 1
1 1 3271 0
1 0 2896 2
3 1 2356 4129 1
1 0 112 0
1 2 3357 3
1 0 8704 9
1 0 4423 8
1 2 3869 8
1 0 4129 0
1 1 9350 3

#include <stdio.h>

typedef enum {
	INIT,
	ADD,
	DELETE,
	CHANGE,
	GETCOUNT
} COMMAND;

extern void init();
extern void addEvent(int uid, char ename[], int groupid);
extern int deleteEvent(int uid, char ename[]);
extern int changeEvent(int uid, char ename[], char cname[]);
extern int getCount(int uid);

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

static int mSeed;
static int pseudo_rand(void)
{
	mSeed = mSeed * 431345 + 2531999;
	return mSeed & 0x7FFFFFFF;
}

static void make_string(char str[], int seed)
{
	mSeed = seed;
	int length = 5 + pseudo_rand() % 10;
	for (int i = 0; i < length; ++i) {
		str[i] = 'a' + pseudo_rand() % 26;
	}
	str[length] = 0;
}

static int run()
{
	int answer = 100;

	int cmd, p1, p2, p3, p4;
	char str1[15], str2[15];

	int N, ret, flag;
	scanf("%d %d %d", &cmd, &N, &flag);

	init();

	for (int i = 1; i < N; ++i) {
		scanf("%d", &cmd);
		switch (cmd) {
		case ADD:
			if (flag == 1) {
				scanf("%d %s %d", &p1, str1, &p3);
			}
			else {
				scanf("%d %d %d", &p1, &p2, &p3);
				make_string(str1, p2);
			}
			addEvent(p1, str1, p3);
			break;

		case DELETE:
			if (flag == 1) {
				scanf("%d %s %d", &p1, str1, &p3);
			}
			else {
				scanf("%d %d %d", &p1, &p2, &p3);
				make_string(str1, p2);
			}
			ret = deleteEvent(p1, str1);
			if (ret != p3)
				answer = 0;
			break;

		case CHANGE:
			if (flag == 1) {
				scanf("%d %s %s %d", &p1, str1, str2, &p4);
			}
			else {
				scanf("%d %d %d %d", &p1, &p2, &p3, &p4);
				make_string(str1, p2);
				make_string(str2, p3);
			}
			ret = changeEvent(p1, str1, str2);
			if (ret != p4)
				answer = 0;
			break;

		case GETCOUNT:
			scanf("%d %d", &p1, &p2);
			ret = getCount(p1);
			if (ret != p2)
				answer = 0;
			break;

		default:
			break;
		}
	}

	return answer;
}

int main()
{
	setbuf(stdout, NULL);
	//freopen("sample_input.txt", "r", stdin);

	int T;
	scanf("%d", &T);

	for (int tc = 1; tc <= T; tc++) {
		printf("#%d %d\n", tc, run());
	}

	return 0;
}


#define MAX_USER (1000)
#define MAX_GROUP (100)
#define MAX_BUF (100 * 1000 * 2)
#define MAX_HASH (1737)
 
typedef unsigned long long ull;
 
struct NODE {
    ull code1, code2;
    int num_user;
    int uid[6];
    NODE* next;
} buf[MAX_BUF], * tb[MAX_GROUP][MAX_HASH];
 
int bcnt;
int num_event_of_user[MAX_USER];
 
ull str2ull(const char* str, ull* c1, ull* c2)
{
    *c1 = *c2 = 0;
 
    for (register int i = 0; i < str[i]; ++i) {
        if (i < 10)
            *c1 += (*c1 << 5) + str[i] - 'a' + 1;
        else
            *c2 += (*c1 << 5) + str[i] - 'a' + 1;
    }
    return (*c1 + *c2) % MAX_HASH;
}
 
void init()
{
    bcnt = 0;
    for (register int i = 0; i < MAX_GROUP; ++i)
        for (register int j = 0; j < MAX_HASH; ++j)
            tb[i][j] = 0;
 
    for (register int i = 0; i < MAX_USER; ++i)
        num_event_of_user[i] = 0;
}
 
void addEvent(int uid, char ename[], int groupid)
{
    NODE* p;
    ull c1, c2;
    ull key = str2ull(ename, &c1, &c2);
 
    for (p = tb[groupid][key]; p; p = p->next) {
        if ((p->code1 == c1) && (p->code2 == c2))
        {
            p->uid[p->num_user] = uid;
            p->num_user++;
            break;
        }
    }
 
    if (!p) {
        p = &buf[bcnt++];
        p->code1 = c1;
        p->code2 = c2;
        p->uid[0] = uid;
        p->num_user = 1;
        p->next = tb[groupid][key];
        tb[groupid][key] = p;
    }
 
    num_event_of_user[uid]++;
}
 
int deleteEvent(int uid, char ename[])
{
    register int i;
    int ret = 0;
     
    NODE* p;
    ull c1, c2;
    ull key = str2ull(ename, &c1, &c2);
     
    for (register int gid = 0; gid < MAX_GROUP; ++gid) {
        for (p = tb[gid][key]; p; p = p->next) {
            if ((p->code1 == c1) && (p->code2 == c2)) {
                for (i = 0; (i < p->num_user) && (p->uid[i] != uid); ++i);
                if (i == p->num_user)
                    continue;
 
                // master
                if (p->uid[0] == uid) {
                    for (i = 0; i < p->num_user; ++i) {
                        num_event_of_user[p->uid[i]]--;
                        ret++;
                    }
                    p->num_user = 0;
                }
                // normal
                else {
                    for (register int j = i; j < p->num_user; ++j)
                        p->uid[j] = p->uid[j + 1];
                    p->num_user--;
                    num_event_of_user[uid]--;
                    ret++;
                }
                return ret;
            }
        }
    }
    return ret;
}
 
int changeEvent(int uid, char ename[], char cname[])
{
    register int i;
    int ret = 0;
     
    NODE* p;
    ull c1, c2;
    ull key = str2ull(ename, &c1, &c2);
     
    for (register int gid = 0; gid < MAX_GROUP; ++gid) {
        for (p = tb[gid][key]; p; p = p->next) {
            if ((p->code1 == c1) && (p->code2 == c2)) {              
                for (i = 0; (i < p->num_user) && (p->uid[i] != uid); ++i);
                 
                if (i == p->num_user)
                    continue;
 
                key = str2ull(cname, &c1, &c2);
                NODE* q = &buf[bcnt++];
                q->code1 = c1;
                q->code2 = c2;
                q->num_user = 0;
                q->next = tb[gid][key];
                tb[gid][key] = q;
 
                // master
                if (p->uid[0] == uid) {
                    for (i = 0; i < p->num_user; ++i) {
                        q->uid[i] = p->uid[i];
                        q->num_user++;
                        ret++;
                    }
                    p->num_user = 0;
                }
                // normal
                else {
                    for (register int j = i; j < p->num_user; ++j)
                        p->uid[j] = p->uid[j + 1];
                    p->num_user--;
                    q->uid[0] = uid;
                    q->num_user++;
                    ++ret;
                }
                return ret;
            }
        }
    }
    return ret;
}
 
int getCount(int uid)
{
    return num_event_of_user[uid];
}
