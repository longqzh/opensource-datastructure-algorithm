
10 100
24
100 5 4
200 5 1
200 2 4
200 1 4
200 2 1
300 71 1 10
300 67 4 8
300 43 3 4
300 3 2 4
300 75 4 4
500 4 3
400 4 75
500 1 67
300 81 2 10
400 2 67
300 69 1 5
300 55 3 6
500 2 3
400 5 69
500 5 71
200 3 5
200 3 4
300 28 4 10
500 3 28
20
100 5 2
200 1 5
200 4 1
200 3 1
200 3 2
300 714702 1 10
300 2 2 5
300 346539085 2 9
300 461683254 1 7
300 74 1 7
400 4 2
300 5351 1 3
300 1 2 2
400 1 1
300 6148 2 5
300 75043011 2 3
500 4 75043011
500 5 75043011
300 90235 2 3
500 2 5351
40
100 10 2
200 2 3
200 6 1
200 2 7
200 3 5
300 48921254 2 3
300 55249 2 7
300 34 2 5
300 5642188 2 4
300 5791776 2 1
300 99957 1 9
300 1 1 7
300 1736 2 7
300 985746750 1 1
300 170141 2 6
300 405 2 10
300 70 2 4
400 10 5791776
500 7 985746750
300 729372290 2 6
400 2 985746750
300 86688 2 2
500 8 86688
300 51347534 1 3
500 2 51347534
500 5 86688
500 4 86688
300 3 2 10
300 6 1 10
300 7154 2 8
500 2 51347534
500 10 86688
400 1 86688
300 642740946 1 3
500 8 48921254
500 7 51347534
200 4 1
300 2446 1 7
300 69834 1 6
500 3 51347534

#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <stdio.h>

extern void init(int N, int M);
extern void befriend(int uid1, int uid2);
extern void add(int pid, int area, int price);
extern void reserve(int uid, int pid);
extern int  recommend(int uid);

#define INIT			100
#define BEFRIEND		200
#define ADD				300
#define RESERVE			400
#define RECOMMEND		500

static bool run()
{
	int L, N, M;
	bool okay = false;
	
	int pid, uid;
	int uid1, uid2;
	int area, price;
	
	int ans;
	int cmd, ret;

	scanf("%d", &L);

	for (int l = 0; l < L; ++l)
	{
		scanf("%d", &cmd);
		switch(cmd)
		{
		case INIT:
			scanf("%d %d", &N, &M);
			init(N, M);
			okay = true;
			break;
		case BEFRIEND:
			scanf("%d %d", &uid1, &uid2);
			befriend(uid1, uid2);
			break;
		case ADD:
			scanf("%d %d %d", &pid, &area, &price);
			add(pid, area, price);
			break;
		case RESERVE:
			scanf("%d %d", &uid, &pid);
			reserve(uid, pid);
			break;
		case RECOMMEND:
			scanf("%d %d", &uid, &ans);
			ret = recommend(uid);
			if (ret != ans)
				okay = false;
			break;
		}
	}
	
	return okay;
}

int main() {
	int TC, MARK;
	
    //freopen("sample_input.txt", "r", stdin);

	setbuf(stdout, NULL);
    scanf("%d %d", &TC, &MARK);

    for (int testcase = 1; testcase <= TC; ++testcase) {
		int score = run() ? MARK : 0;
		printf("#%d %d\n", testcase, score);
    }

    return 0;
}








#define MAX_USER 1001
#define MAX_TRAVEL 40000
#define MAX_AREA 11
#define MAX_FRIENDS 20
#define MAX_HASH 20007
 
typedef unsigned long long LL;
 
struct NODE {
    int pid;
    int area;
    LL score;
    int reserved;
    NODE* next;
}node[MAX_TRAVEL];
 
struct USER {
    int friendsCnt;
    int friends[MAX_FRIENDS];
    int total[MAX_AREA];
    int count[MAX_AREA];
}user[MAX_USER];
 
struct HEAP {
    int heapSize;
    int heapId[MAX_TRAVEL];
 
    void push(int id) {
        register int current;
        current = ++heapSize;
 
        while ( (current != 1) && node[id].score < node[heapId[current/2]].score) {
            heapId[current] = heapId[current/2];
            current = current/2;
        }
 
        heapId[current] = id;
    }
 
    void pop() {
        register int parent, child;
        register int id = heapId[heapSize--];
         
        parent = 1;
        child = 2;
 
        while (child <= heapSize) {
            if ((child < heapSize) && (node[heapId[child]].score > node[heapId[child+1]].score)) {
                child++;
            }
 
            if (node[id].score <= node[heapId[child]].score) {
                break;
            }
 
            heapId[parent] = heapId[child];
 
            parent = child;
            child = child * 2;
        }
 
        heapId[parent] = id;
    }
 
    int getTop() {
        return heapId[1];
    }
}heap[MAX_AREA];
 
int nodeCnt;
NODE* table[MAX_HASH];
int totalAreaCnt;
NODE* tempRetNode[1];
 
NODE* findNode(LL key, int pid) {
    for (register NODE* temp = table[key]; temp; temp = temp->next) {
        if (temp->pid == pid) {
            return temp;
        }
    }
 
    return 0;
}
 
void init(int N, int M)
{
    nodeCnt = 0;
    totalAreaCnt = M;
 
    for (register int i = 0; i < MAX_TRAVEL; i++) {
        node[i] = { 0, };
    }
 
    for (register int i = 0; i < MAX_USER; i++) {
        user[i].friendsCnt = 0;
        for (register int j = 1; j <= totalAreaCnt; j++) {
            user[i].total[j] = 0;
            user[i].count[j] = 0;
        }
    }
 
    for (register int i = 0; i < MAX_HASH; i++) {
        table[i] = { 0, };
    }
 
    for (register int i = 0; i < MAX_AREA; i++) {
        heap[i].heapSize = 0;
    }
}
 
void befriend(int uid1, int uid2)
{
    user[uid1].friends[user[uid1].friendsCnt++] = uid2;
    user[uid2].friends[user[uid2].friendsCnt++] = uid1;
 
    for (register int i = 1; i <= totalAreaCnt; i++) {
        user[uid1].total[i] += user[uid2].count[i];
        user[uid2].total[i] += user[uid1].count[i];
    }
}
 
void add(int pid, int area, int price)
{
    register LL key = pid % MAX_HASH;
 
    register NODE* tempNode = &node[nodeCnt];
    tempNode->pid = pid;
    tempNode->area = area;
    tempNode->reserved = 0;
    tempNode->score = (LL)price << 30 | pid;
    tempNode->next = table[key];
    table[key] = tempNode;
 
    heap[area].push(nodeCnt++);
}
 
void reserve(int uid, int pid)
{
    register LL key = pid % MAX_HASH;
    register NODE* tempNode = findNode(key, pid);
    tempNode->reserved = 1;
 
    user[uid].count[tempNode->area]++;
    user[uid].total[tempNode->area]++;
 
    for (register int i = 0; i < user[uid].friendsCnt; i++) {
        user[user[uid].friends[i]].total[tempNode->area]++;
    }
}
 
int recommend(int uid)
{
    register NODE tempNode = { 0,0,(LL)1 << 40 };
    register int tempVal = 0;
 
    for (register int i = 1; i <= totalAreaCnt; i++) {
        while (heap[i].heapSize > 0 && node[heap[i].getTop()].reserved) {
            heap[i].pop();
        }
 
        if (heap[i].heapSize == 0)
            continue;
 
        //가장 많이 예약한 지역을 찾는다
        if (tempVal < user[uid].total[i]) {
            tempNode = node[heap[i].getTop()];
            tempVal = user[uid].total[i];
        }
        else if (tempVal == user[uid].total[i] && node[heap[i].getTop()].score < tempNode.score) {
            tempNode = node[heap[i].getTop()];
        }
    }
 
    return tempNode.pid;
}
